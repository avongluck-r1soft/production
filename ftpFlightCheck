#!/usr/bin/env python

from subprocess import Popen,PIPE,STDOUT

import subprocess
import sys
import ast

class color_message:
    OK   = '\033[92m'
    FAIL = '\033[91m'

def get_region():
    with open("/etc/hostname", "r") as f:
        for line in f:
            host, domain1, domain2 = line.split('.')

    return host[:3]


#
# see if we're in production or not. "itsupport247" value for domain1 means we're in production.
#
def get_environment():
    with open("/etc/hostname", "r") as f:
        for line in f:
            host, domain1, domain2 = line.split('.')

    return domain1    


def run_command(str):
    process = Popen(args=str, stdout=PIPE, shell=True)
    return process.communicate()[0]


def check_host_keys():

    failures = 0

    region = get_region()

    print("Host Keys in /usr/sbin/r1soft/etc/server.allow dir:")

    installed_host_keys = run_command("ls /usr/sbin/r1soft/etc/server.allow").rstrip("\n")

    if region == "sjc":
        if get_environment() == "itsupport247":
            sbms = [
                "10.100.160.196", "10.109.218.21",  "10.125.31.125",  "10.148.215.82", "10.160.189.137",
                "10.160.189.149", "10.160.189.161", "10.160.189.179", "10.164.12.121", "10.164.12.82",
                "10.100.160.219", "10.122.169.173", "10.125.31.77",   "10.148.215.86", "10.160.189.143",
                "10.160.189.154", "10.160.189.166", "10.160.189.187", "10.164.12.68",  "10.164.12.97",
                "10.100.160.236", "10.125.31.116",  "10.148.215.75",  "10.160.189.132", "10.160.189.146",
                "10.160.189.156", "10.160.189.170", "10.164.12.109",  "10.164.12.75"
            ]

        if get_environment() == "stage":
            sbms = []

    if region == "wdc":
        if get_environment() == "itsupport247":
            sbms = [
                "10.100.160.196", "10.109.218.21",  "10.148.215.121", "10.148.215.96",  "10.160.189.143",  
                "10.160.189.154", "10.160.189.170", "158.85.186.20",  "169.54.24.100",  "10.100.160.219",
                "10.125.31.116",  "10.148.215.82",  "10.160.189.132", "10.160.189.146", "10.160.189.161",  
                "10.160.189.187", "158.85.186.21",  "169.54.24.101",  "10.100.160.236", "10.125.31.72",   
                "10.148.215.86",  "10.160.189.137", "10.160.189.149", "10.160.189.166", "10.170.70.25",    
                "158.85.186.22",  "169.54.24.102",  "wdcsbm09",       "wdcsbm10",       "sjcsbm06",
                "wdcsbm17",       "sjcsbm05",       "wdcsbm10"
            ]

    if get_environment() == "hou":
            sbms = ["housbm01", "housbm02", "lonsbm01", "lonsbm02"]

    if region == "loa" or region == "lob":
        if get_environment() == "itsupport247":
            sbms = [
                "lobsbm01", "lobsbm02", "lobsbm04",
                "loasbm03", "loasbm03", "loasbm04"
            ]

        if get_environment() == "stage":
            sbms = ["10.164.100.46", "loasbm01", "lobsbm01"]

    for sbm in sbms:
        if sbm not in installed_host_keys:
            print color_message.FAIL + "FAIL: " + sbm + " -- host key not present in /usr/sbin/r1soft/etc/server.allow dir..."
            print color_message.FAIL + "Add key using the following command:"
            print color_message.FAIL + "wget --no-check-certificate https://" + sbm + ":8443/public_info -O /usr/sbin/r1soft/etc/server.allow/" + sbm

	    failures += 1
        else: 
            print color_message.OK + "  OK: " + sbm

    return failures

#
# check for r1rm and r1cm host entries
#
def check_host_entries():

    failures = 0
    found_hosts = 0

    if get_environment() == "itsupport247":
        print color_message.OK + "  OK: r1rm_prod and r1cm_prod host entries not needed in production environment. Skipping check."
        return failures

    R1HOSTS = [ "r1rm_prod.itsupport247.net", "r1cm_prod.itsupport247.net" ]
    LOCAL = []

    with open("/etc/hosts", "r") as f:
        for line in f:
            for host in R1HOSTS:
                if host in line:
                    found_hosts += 1
		    LOCAL.append(host)
                    print color_message.OK + "  OK: found " + host + " in /etc/hosts file."

    if found_hosts == len(R1HOSTS): 
        print color_message.OK + "  OK: found both R1 hosts in /etc/hosts file."
    else:
        for host in R1HOSTS:
            if host not in LOCAL:
                failures += 1
                print color_message.FAIL + "FAIL: missing " + host + " in /etc/hosts file."

    return failures

def check_ftp_conf():

    failures = 0

    ftp_conf_names = [ 
        '"UserAuthFile"', '"DefaultUID"', '"DefaultGID"', '"UsernamePrefix"', 
        '"DefaultTimeoutSeconds"', '"JailRoot"', '"SCSIConf"', '"SCSIRoot"'
    ]

    # fuck all of this.
    ftp_conf_vals = [ 
        '"/opt/r1soft/ftp/users",', '500,', '65534,', '"user",', '345600,', 
        '"/opt/r1soft/ftp/home",', '"/opt/r1soft/ftp/conf",', '"/opt/r1soft/ftp/scsi"'
    ]

    NAMES  = []
    VALUES = []

    with open("/opt/r1soft/r1ctl/config/ftp.conf", "r") as f:
        for line in f:
            if line == "{\n" or line == "}\n":
                continue
            
            k, colon, v = line.split()
            NAMES.append(k)
            VALUES.append(v)
  
    for i in ftp_conf_names:
        if i in NAMES:
            print color_message.OK + "  OK: found " + i + " in ftp.conf."
        else:
            print color_message.FAIL + "FAIL: cannot find " + i + " in ftp.conf."
            failures += 1

    for i in ftp_conf_vals:
        if i in VALUES:
            print color_message.OK + "  OK: found " + str(i) + " in ftp.conf."
        else:
            print color_message.FAIL + "FAIL: cannot find " + str(i) + " in ftp.conf."
            failures += 1

    return failures


def main():

    TOTAL_FAILURES = []
    TOTAL_FAILURES.append(check_host_keys())
    TOTAL_FAILURES.append(check_host_entries())
    TOTAL_FAILURES.append(check_ftp_conf())

    SUM = sum(TOTAL_FAILURES)

    if SUM > 0:
        print color_message.FAIL + "FAIL: " + str(SUM) + " total failures."
    else:
        print color_message.OK + "  OK: zero issues on this FTP server."


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit()

